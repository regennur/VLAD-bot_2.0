import datetime
import random
import pymorphy2
import logging
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import Updater, MessageHandler, Filters, CallbackQueryHandler,  CommandHandler, ConversationHandler
import time
from get_rifma import getRif
from random_world import get_random_world


# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

# TOKEN = '5393097474:AAGMz30ZHHuxB2Dwh8gG-xJsQTEHQd3Aqgg'
TOKEN = '5310503602:AAHULua2LC6Av3HhIQbt9lb5Mh8uLUWrFks'


def morf():
    morf_arr = get_random_world()
    adf = morf_arr['adf']
    non = morf_arr['non']
    veb = morf_arr['veb']

    morph = pymorphy2.MorphAnalyzer()
    res = morph.parse(non)[0]
    gender = res.tag.gender
    ADJF = morph.parse(adf)[0].inflect({gender}).word
    VERB = morph.parse(veb)[0].inflect({gender}).word
    phrasGEN = str(ADJF) + ' ' + str(non) + ' ' + str(VERB)
    return phrasGEN


# –ù–∞–ø–∏—à–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
# –ò—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
def start(update, context):
    update.message.reply_text(
        """ –ø—Ä–∏–≤–µ—Ç)
        —è —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ –º—ã—Å–ª–µ–π.
        –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö:
         /help - –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ –º–Ω–æ–π
         /data - –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ –æ—â—É—â–µ–Ω–∏—è –º–∏—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
         /timee - –µ—Å–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º-–≤—Ä–µ–º–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–∏–Ω—É—É–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
         /phraGen - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–π –¥–ª—è —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º—ã—Å–ª–µ–π
         /rifma <—Ç–≤–æ—ë —Å–ª–æ–≤–æ> - –ø–∞—Ä—É —Ä–∏—Ñ–º –¥–ª—è —Ç–≤–æ–∏—Ö —á—É–¥–µ—Å–Ω—ã—Ö —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π
         """)

    # reply_keyboard = [['Boy', 'Girl', 'Other']]
    # # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    # markup_key = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    # # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –≤–æ–ø—Ä–æ—Å–∞
    # update.message.reply_text(
    #     '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ë–æ—Ç. –Ø –ø—Ä–æ–≤–µ–¥—É —Å –≤–∞–º–∏ –±–µ—Å–µ–¥—É. '
    #     '–ö–æ–º–∞–Ω–¥–∞ /cancel, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä.\n\n'
    #     '–¢—ã –º–∞–ª—å—á–∏–∫ –∏–ª–∏ –¥–µ–≤–æ—á–∫–∞?',
    #     reply_markup=markup_key,)
    update.message.reply_text(
        " —è –í–ª–∞–¥, –∫—Å—Ç–∞—Ç–∏. –ê –∫–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—é—Ç? –∏–ª–∏ —Å–∞–º –Ω–∞–∑–æ–≤–∏—Å—å")
    return 1


def help(update, context):
    update.message.reply_text(
        "–ø–∏—à–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –ø–æ–Ω–∏–º–∞–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∞–¥–∞–π))")


def rifma(update, context):
    # update.message.reply_text(
    #     "–≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –¥–ª—è —Ä–∏—Ñ–º—ã")
    word = context.args[0]
    rifms = getRif(word)

    if len(rifms) == 0:
        update.message.reply_text(
            "–¥—Ä—É–≥, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–∏—Ñ–º—É –∫ —ç—Ç–æ–º—É —Å–ª–æ–≤—É...))")
    else:
        # lnr = 10 if len(rifms) > 10 else len(rifms)
        str_temp = ", ".join(rifms[:50])

        update.message.reply_text(
            " " + str_temp)

    # update.message.reply_text(
    #     f"{word}")


def phraGen(update, context):
    pfrasa = morf()
    update.message.reply_text(
        f"–ª–æ–≤–∏üéÜ: {pfrasa} ")


def timee(update, context):
    now = datetime.datetime.now()
    nh = now.hour
    hour = nh + 3
    minut = now.minute
    sec = now.second
    microsec = now.microsecond
    update.message.reply_text(
        'üïó: ' + str(hour)+': '+str(minut)+': '+str(sec)+': '+str(microsec)+'..')


def data(update, context):
    t = time.localtime()
    td = str(time.asctime(t))
    update.message.reply_text(td[:11] + td[19:])


def first(update, context):
    name = update.message.text

    update.message.reply_text(
        f"üëã –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name})")

    update.message.reply_text(
        "–∫–∞–∫ –¥–µ–ª–∞?")
    return 2


def first_response(update, context):
    locality = update.message.text
    if locality == '—Ö–æ—Ä–æ—à–æ' or locality == '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ' or locality == '—á—É–¥–µ—Å–Ω–æ' or locality == '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ' or locality == '–æ—Ç–ª–∏—á–Ω–æ':
        update.message.reply_text(
            "‚òÄÔ∏è, —è —Ä–∞–¥:) –£ –º–µ–Ω—è –≤—Å—ë —Ç–æ–∂–µ —Ö–æ—Ä–æ—à–æ. –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∫–∞–∫ —É –ö–∞—Ä–ª—Å–æ–Ω–∞: —Ö–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ –∏ –ø–æ—à–∞–ª–∏—Ç—å.")
    elif locality == '–Ω–µ –ø–ª–æ—Ö–æ' or locality == '–Ω–æ—Ä–º' or locality == '—Ç–∞–∫ —Å–µ–±–µ' or locality == '–Ω–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(
            """—Å–æ—á—É–≤—Å—Ç–≤—É—é) –Ω–∞–¥–µ—é—Å—å, –≤—Å—ë —Ö–æ—Ä–æ—à–æ
               –ë—ã–≤–∞–µ—Ç —Ç–∞–∫ —Ö—Ä–µ–Ω–æ–≤–æ, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å: 
               03 ‚Äî –∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ 0,5 ‚Äî –Ω–∞–ª–∏—Ç—å?..:)
               –ü—Ä–æ—â–µ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —á–µ–º –æ–±—ä—è—Å–Ω—è—Ç—å, –ø–æ—á–µ–º—É —Ç–∞–∫ —Ö—Ä–µ–Ω–æ–≤–æ. –î–∞?
            """)
    elif locality == '–ø–ª–æ—Ö–æ' or locality == '—É–∂–∞—Å–Ω–æ' or locality == '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ':
        update.message.reply_text(
            """–ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É —Å–µ–±—è –¥–µ–ø—Ä–µ—Å—Å–∏—é –∏ –∑–∞–Ω–∏–∂–µ–Ω–Ω—É—é —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É,
                —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –Ω–µ –æ–∫—Ä—É–∂–µ–Ω –∏–¥–∏–æ—Ç–∞–º–∏
             """)
    else:
        update.message.reply_text(
            """–í—Å–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–ª–ª—é–∑–∏–µ–π, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∏ –ø—Ä–æ—Å—Ç—ã–º,
            —Ç–∞–∫–∏–º –∫–∞–∫–∏–º —è–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –æ–±—â–µ–≥–æ —Å ¬´—Ö–æ—Ä–æ—à–∏–º¬ª –∏–ª–∏ ¬´–ø–ª–æ—Ö–∏–º¬ª,
             —Å ¬´–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å—é¬ª –∏–ª–∏ ¬´–æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ–º¬ª. –ü–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ —Ç–∞–∫ –∂–µ —Ö–æ—Ä–æ—à–æ. –í–∑–æ—Ä–≤–∞—Ç—å—Å—è —Å–º–µ—Ö–æ–º.
             """)

    update.message.reply_text(
        "–Ω–µ —Ö–æ—á–µ—à—å –≤–∫—É—Å–∏—Ç—å –∞—Ä–æ–º–∞—Ç —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞?üìñüñã")

    return 3


def second_response(update, context):

    locality1 = update.message.text

    if locality1 == '–Ω–∏ –∫–∞–ø–ª–∏' or locality1 == '–Ω–µ—Ç' or locality1 == '–æ—Ç—Å—Ç–∞–Ω—å' or locality1 == '–Ω–µ–∞' or locality1 == '–Ω–µ':
        update.message.reply_text(
            "–õ–µ–Ω—å, –∫–æ–Ω–µ—á–Ω–æ, –¥–≤–∏–≥–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –Ω–æ –≤—Å—ë –∂–µ))")
        update.message.reply_text(
            f" –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑—É–µ—à—å—Å—è /phraGen ?")
    elif locality1 == '–Ω–µ –∑–Ω–∞—é' or locality1 == '–ø–æ—Ñ–∏–≥' or locality1 == '–≤—Å—ë —Ä–∞–≤–Ω–æ' or locality1 == '–±–µ–∑—Ä–∞–∑–Ω–∏—Ü—ã':
        update.message.reply_text(
            "–ø–æ—Ñ–∏–≥–∏–∑–º ‚Äî —ç—Ç–æ –±–µ–∑–º—è—Ç–µ–∂–Ω–∞—è –ª—ë–≥–∫–æ—Å—Ç—å –±—ã—Ç–∏—è?")
        update.message.reply_text(
            f" –Ω–∞–ø–æ–º–∏–Ω–∞—é —Ç–µ–±–µ –æ  /phraGen üìù")
    elif locality1 == '–¥–∞' or locality1 == '–º–æ–∂–Ω–æ' or locality1 == '—Ö–æ—á—É':
        update.message.reply_text(
            "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ)")
        update.message.reply_text(
            f"üòù –µ—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∏–¥–µ–π, —Ç–æ  /phraGen –≤ –ø–æ–º–æ—â—å)")

    else:
        update.message.reply_text(
            "–≠–º?")
        update.message.reply_text(
            f" –Ω–∞–∂–º–∏  /phraGen !")
    return ConversationHandler.END


def stop(update, _):
    update.edit_message_text(text="–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æüò¥")
    return ConversationHandler.END


def main():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç updater.
    # –í–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞ "TOKEN" –Ω–∞–¥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather —Ç–æ–∫–µ–Ω
    updater = Updater(TOKEN)

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–µ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π.
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            # –î–æ–±–∞–≤–∏–ª–∏ user_data –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
            1: [MessageHandler(Filters.text & ~Filters.command, first)],

            2: [MessageHandler(Filters.text & ~Filters.command, first_response)],
            # ...–∏ –¥–ª—è –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
            3: [MessageHandler(Filters.text & ~Filters.command, second_response)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Ö –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ —Ä—è–¥–æ–º
    # —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    # –ü–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ CommandHandler —è
    # –≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.
    # dp.add_handler(CommandHandler("start", start))
    dp.add_handler(conv_handler)

    dp.add_handler(CommandHandler("help", help))

    dp.add_handler(CommandHandler("phraGen", phraGen))

    dp.add_handler(CommandHandler("timee", timee))

    dp.add_handler(CommandHandler("data", data))

    dp.add_handler(CommandHandler("rifma", rifma))
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏–µ–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    updater.start_polling()

    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ SIG_TERM –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à Ctrl+C)
    updater.idle()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
